{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport { FETCH_GROUPS, LOGIN_USER, SET_USER, CREATE_GROUP, ADD_GROUP_MESSAGES } from '../actions/constants';\nimport { showCreateGroupModal, updateGroups, fetchGroups } from '../actions/groupActions';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport setAuthToken from '../utils/setAuthTokenAsHeader';\nimport jwt_decode from 'jwt-decode';\n/* Fetch All Groups */\n\nfunction fetchGroupsFromApi() {\n  return axios.get('/api/group');\n}\n\nfunction* fetchGroupsList() {\n  const response = yield call(fetchGroupsFromApi);\n  console.log('Groups', response);\n  yield put(updateGroups(response.data));\n}\n/* Create Group */\n\n\nfunction callCreteGroupApi(name) {\n  return axios.post('/api/group/create', {\n    name\n  });\n}\n\nfunction* createGroup(action) {\n  const response = yield call(callCreteGroupApi, action.payload);\n  console.log(response);\n  yield put(fetchGroups());\n}\n/* Login User */\n\n\nfunction callLoginApi(userData) {\n  return axios.post('/api/user/login', userData, {\n    validateStatus: function (status) {\n      return status >= 200 && status < 500;\n    }\n  });\n}\n\nfunction* loginUser(action) {\n  try {\n    const response = yield call(callLoginApi, action.payload);\n    console.log(response);\n\n    if (response.status === 200) {\n      const token = response.data.token; //Save token in local storage\n\n      localStorage.setItem('jwtToken', token); //Set token as axios header\n\n      setAuthToken(token); // Save user in store\n\n      console.log('token decode', jwt_decode(token));\n      yield put({\n        type: SET_USER,\n        payload: jwt_decode(token)\n      });\n    }\n  } catch (e) {\n    console.log('Err', e);\n  }\n} // Add Message\n\n\nfunction callAddMessageApi(groupId, content) {\n  return axios.post(\"/api/group/addMessage/\".concat(groupId), {\n    content\n  });\n}\n\nfunction* addMessage(action) {\n  const _action$payload = action.payload,\n        groupId = _action$payload.groupId,\n        content = _action$payload.content;\n  const response = yield call(callAddMessageApi, groupId, content);\n  console.log('Add Message', response);\n  yield put(fetchGroups());\n}\n\nfunction* mySaga() {\n  yield takeLatest(FETCH_GROUPS, fetchGroupsList);\n  yield takeLatest(LOGIN_USER, loginUser);\n  yield takeLatest(CREATE_GROUP, createGroup);\n  yield takeLatest(ADD_GROUP_MESSAGES, addMessage);\n}\n\nexport default mySaga;","map":{"version":3,"sources":["/home/ibrahim/Repos/Simple-ChatApp/client/src/sagas/index.js"],"names":["call","put","takeEvery","takeLatest","FETCH_GROUPS","LOGIN_USER","SET_USER","CREATE_GROUP","ADD_GROUP_MESSAGES","showCreateGroupModal","updateGroups","fetchGroups","axios","setAuthToken","jwt_decode","fetchGroupsFromApi","get","fetchGroupsList","response","console","log","data","callCreteGroupApi","name","post","createGroup","action","payload","callLoginApi","userData","validateStatus","status","loginUser","token","localStorage","setItem","type","e","callAddMessageApi","groupId","content","addMessage","mySaga"],"mappings":"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","sourcesContent":["import { call, put, takeEvery, takeLatest } from 'redux-saga/effects';\nimport {\n  FETCH_GROUPS,\n  LOGIN_USER,\n  SET_USER,\n  CREATE_GROUP,\n  ADD_GROUP_MESSAGES\n} from '../actions/constants';\nimport {\n  showCreateGroupModal,\n  updateGroups,\n  fetchGroups\n} from '../actions/groupActions';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport setAuthToken from '../utils/setAuthTokenAsHeader';\nimport jwt_decode from 'jwt-decode';\n\n/* Fetch All Groups */\nfunction fetchGroupsFromApi() {\n  return axios.get('/api/group');\n}\n\nfunction* fetchGroupsList() {\n  const response = yield call(fetchGroupsFromApi);\n  console.log('Groups', response);\n  yield put(updateGroups(response.data));\n}\n\n/* Create Group */\nfunction callCreteGroupApi(name) {\n  return axios.post('/api/group/create', { name });\n}\n\nfunction* createGroup(action) {\n  const response = yield call(callCreteGroupApi, action.payload);\n  console.log(response);\n  yield put(fetchGroups());\n}\n\n/* Login User */\nfunction callLoginApi(userData) {\n  return axios.post('/api/user/login', userData, {\n    validateStatus: function(status) {\n      return status >= 200 && status < 500;\n    }\n  });\n}\n\nfunction* loginUser(action) {\n  try {\n    const response = yield call(callLoginApi, action.payload);\n    console.log(response);\n    if (response.status === 200) {\n      const token = response.data.token;\n      //Save token in local storage\n      localStorage.setItem('jwtToken', token);\n      //Set token as axios header\n      setAuthToken(token);\n      // Save user in store\n      console.log('token decode', jwt_decode(token));\n      yield put({ type: SET_USER, payload: jwt_decode(token) });\n    }\n  } catch (e) {\n    console.log('Err', e);\n  }\n}\n\n// Add Message\nfunction callAddMessageApi(groupId, content) {\n  return axios.post(`/api/group/addMessage/${groupId}`, { content });\n}\n\nfunction* addMessage(action) {\n  const { groupId, content } = action.payload;\n  const response = yield call(callAddMessageApi, groupId, content);\n  console.log('Add Message', response);\n  yield put(fetchGroups());\n}\n\nfunction* mySaga() {\n  yield takeLatest(FETCH_GROUPS, fetchGroupsList);\n  yield takeLatest(LOGIN_USER, loginUser);\n  yield takeLatest(CREATE_GROUP, createGroup);\n  yield takeLatest(ADD_GROUP_MESSAGES, addMessage);\n}\n\nexport default mySaga;\n"]},"metadata":{},"sourceType":"module"}