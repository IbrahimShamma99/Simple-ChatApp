{"ast":null,"code":"var _jsxFileName = \"/home/ibrahim/Repos/Simple-ChatApp/client/src/App.js\";\nimport React from 'react';\nimport Dashboard from './components/dashboard';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers';\nimport mySaga from './sagas';\nimport createSagaMiddleware from 'redux-saga';\nimport jwt_decode from 'jwt-decode';\nimport { logoutUser } from './actions/authActions';\nimport { SET_USER } from './actions/constants';\nimport setAuthToken from './utils/setAuthTokenAsHeader';\nimport { compose } from 'redux'; // Create the saga middleware\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({// Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n}) : compose;\nconst enhancer = composeEnhancers(applyMiddleware(sagaMiddleware));\nconst store = createStore(rootReducer, enhancer);\nsagaMiddleware.run(mySaga);\n\nif (localStorage.getItem('jwtToken')) {\n  const token = localStorage.getItem('jwtToken');\n  const decoded = jwt_decode(token);\n  const currentTime = Date.now() / 1000;\n\n  if (decoded.exp < currentTime) {\n    store.dispatch(logoutUser());\n  } else {\n    //Set token as axios header\n    setAuthToken(token); // Save user in store\n\n    store.dispatch({\n      type: SET_USER,\n      payload: jwt_decode(token)\n    });\n  }\n}\n\nfunction App() {\n  return React.createElement(Provider, {\n    store: store,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Dashboard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/ibrahim/Repos/Simple-ChatApp/client/src/App.js"],"names":["React","Dashboard","createStore","applyMiddleware","Provider","rootReducer","mySaga","createSagaMiddleware","jwt_decode","logoutUser","SET_USER","setAuthToken","compose","sagaMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","enhancer","store","run","localStorage","getItem","token","decoded","currentTime","Date","now","exp","dispatch","type","payload","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAO,WAAP;AACA,SAAQC,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,WAAR,QAA0B,YAA1B;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAAQC,OAAR,QAAsB,OAAtB,C,CAEA;;AACA,MAAMC,cAAc,GAAGN,oBAAoB,EAA3C;AACA,MAAMO,gBAAgB,GACpB,OAAOC,MAAP,KAAkB,QAAlB,IACAA,MAAM,CAACC,oCADP,GAEED,MAAM,CAACC,oCAAP,CAA4C,CAC1C;AAD0C,CAA5C,CAFF,GAIOJ,OALT;AAOA,MAAMK,QAAQ,GAAGH,gBAAgB,CAC3BX,eAAe,CAACU,cAAD,CADY,CAAjC;AAGA,MAAMK,KAAK,GAAGhB,WAAW,CAACG,WAAD,EAAaY,QAAb,CAAzB;AACAJ,cAAc,CAACM,GAAf,CAAmBb,MAAnB;;AAEA,IAAGc,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAH,EAAqC;AACnC,QAAMC,KAAK,GAAGF,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd;AACA,QAAME,OAAO,GAAGf,UAAU,CAACc,KAAD,CAA1B;AACA,QAAME,WAAW,GAAGC,IAAI,CAACC,GAAL,KAAW,IAA/B;;AACA,MAAGH,OAAO,CAACI,GAAR,GAAcH,WAAjB,EAA6B;AAC3BN,IAAAA,KAAK,CAACU,QAAN,CAAenB,UAAU,EAAzB;AACD,GAFD,MAEO;AACL;AACAE,IAAAA,YAAY,CAACW,KAAD,CAAZ,CAFK,CAGL;;AACAJ,IAAAA,KAAK,CAACU,QAAN,CAAe;AAACC,MAAAA,IAAI,EAACnB,QAAN;AAAeoB,MAAAA,OAAO,EAACtB,UAAU,CAACc,KAAD;AAAjC,KAAf;AACD;AACF;;AAED,SAASS,GAAT,GAAe;AACb,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEb,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF;AAOD;;AAED,eAAea,GAAf","sourcesContent":["import React from 'react';\nimport Dashboard from './components/dashboard';\nimport './App.css';\nimport {createStore, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport {rootReducer} from './reducers';\nimport mySaga from './sagas';\nimport createSagaMiddleware from 'redux-saga';\nimport jwt_decode from 'jwt-decode'\nimport {logoutUser} from './actions/authActions'\nimport {SET_USER} from './actions/constants'\nimport setAuthToken from './utils/setAuthTokenAsHeader'\nimport {compose} from 'redux'\n\n// Create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers =\n  typeof window === 'object' &&\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\n    }) : compose;\n\nconst enhancer = composeEnhancers(\n      applyMiddleware(sagaMiddleware)\n    );\nconst store = createStore(rootReducer,enhancer);\nsagaMiddleware.run(mySaga);\n\nif(localStorage.getItem('jwtToken')) {\n  const token = localStorage.getItem('jwtToken')\n  const decoded = jwt_decode(token);\n  const currentTime = Date.now()/1000;\n  if(decoded.exp < currentTime){\n    store.dispatch(logoutUser())\n  } else {\n    //Set token as axios header\n    setAuthToken(token)\n    // Save user in store\n    store.dispatch({type:SET_USER,payload:jwt_decode(token)})\n  }\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Dashboard />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}